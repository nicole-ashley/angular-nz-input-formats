{"version":3,"sources":["angular-nz-input-formats.js"],"names":["window","angular","NZInputFormats","module","SimpleInputMask","mask","maskChars","this","require","restrict","link","directiveName","options","*","A","9","scope","elem","ctrl","document","lastLen","setMask","bind","doLink","prototype","split","parser","val","Directive","$document","T","Document","attrs","transclude","inst","$observe","processAttributeValue","$formatters","push","formatter","$parsers","value","$eval","extend","isFunction","$$parseAndValidate","$setViewValue","$viewValue","output","_this","String","formatted","rawPos","some","maskChar","length","hasOwnProperty","charAt","input","inputChars","newInputLength","parsedParts","every","nextInputChar","match","shift","parsed","join","caretPosition","selectionStart","currentPositionIsEditable","$render","activeElement","selectionEnd","isArray","$validators","valid","validator","$setValidity","directive","__extends","d","b","__","constructor","p","NZBankNumber","_super","call","shortMask","longMask","strict","prefixes","01","from","to","12","02","31","25","30","38","08","06","11","21","15","18","16","20","14","13","19","17","22","23","29","24","03","replace","superVal","bankCode","substr","bank","branch","branchNumber","Number","NZIrdNumber","Extract","CheckValidRange","base","CalculateCheckDigit","matches","trim","asNumber","expected","weighting","checkDigit","CalculateCheckDigitFor","ReCalculateCheckDigit","sum","i","remainder","NZPhoneNumber","defaultMask","mobileMask","intlMobileMask","landlineMask","intlLandlineMask","specialMask","intlSpecialMask","minLength","raw","sanitise","isDefined","intl","type"],"mappings":"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","file":"angular-nz-input-formats.min.js","sourcesContent":["/*!\n * angular-nz-input-formats\n * Angular directives to validate and format NZ-specific input types\n * @version v0.2.2\n * @link https://github.com/nikrolls/angular-nz-input-formats\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n(function(window, angular, undefined){///<reference path=\"../definitions\\angularjs\\angular.d.ts\"/>\nvar NZInputFormats;\n(function (NZInputFormats) {\n    NZInputFormats.module = angular.module('nzInputFormats', []);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"../definitions\\angularjs\\angular.d.ts\"/>\n///<reference path=\"angular-nz-input-formats.ts\"/>\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var SimpleInputMask = (function () {\n        function SimpleInputMask(mask, maskChars) {\n            if (mask === void 0) { mask = null; }\n            if (maskChars === void 0) { maskChars = null; }\n            // Directive properties\n            this.require = 'ngModel';\n            this.restrict = 'A';\n            this.link = null;\n            this.directiveName = 'nzSimpleInputMask';\n            this.options = {\n                mask: null\n            };\n            this.mask = null;\n            this.maskChars = {\n                '*': /./,\n                'A': /[A-Za-z]/,\n                '9': /[0-9]/\n            };\n            this.scope = null;\n            this.elem = null;\n            this.ctrl = null;\n            this.document = null;\n            this.lastLen = 0;\n            this.setMask(mask);\n            if (maskChars) {\n                this.maskChars = maskChars;\n            }\n            this.link = angular.bind(this, this.doLink);\n        }\n        SimpleInputMask.prototype.setMask = function (mask) {\n            if (mask !== this.options['mask']) {\n                this.mask = mask.split('');\n                this.options['mask'] = mask;\n                if (this.elem) {\n                    this.parser(this.elem.val());\n                }\n            }\n        };\n        SimpleInputMask.Directive = function ($document, T) {\n            if (T === void 0) { T = SimpleInputMask; }\n            SimpleInputMask.Document = $document[0];\n            return {\n                require: 'ngModel',\n                restrict: 'A',\n                link: function link(scope, elem, attrs, ctrl, transclude) {\n                    var inst = new T();\n                    inst.document = SimpleInputMask.Document;\n                    return inst.doLink(scope, elem, attrs, ctrl, transclude);\n                }\n            };\n        };\n        SimpleInputMask.prototype.doLink = function (scope, elem, attrs, ctrl, transclude) {\n            this.scope = scope;\n            this.elem = elem;\n            this.ctrl = ctrl;\n            attrs.$observe(this.directiveName, angular.bind(this, this.processAttributeValue));\n            ctrl.$formatters.push(angular.bind(this, this.formatter));\n            ctrl.$parsers.push(angular.bind(this, this.parser));\n            //if(angular.isArray(ctrl.$validators)) {\n            //    ctrl.$validators[this.directiveName] = angular.bind(this, this.validator);\n            //}\n        };\n        SimpleInputMask.prototype.processAttributeValue = function (value) {\n            var options = this.scope.$eval(value);\n            if (options) {\n                if (options['mask']) {\n                    this.setMask(options['mask']);\n                }\n                this.options = angular.extend(this.options, options);\n                if (angular.isFunction(this.ctrl.$$parseAndValidate)) {\n                    this.ctrl.$$parseAndValidate();\n                }\n                else {\n                    this.ctrl.$setViewValue(this.ctrl.$viewValue);\n                }\n            }\n        };\n        SimpleInputMask.prototype.formatter = function (output) {\n            var _this = this;\n            if (output === void 0) { output = ''; }\n            if (!this.mask) {\n                // Without a mask we have nothing to do\n                return output;\n            }\n            output = String(output);\n            var formatted = '';\n            var rawPos = 0;\n            this.mask.some(function (maskChar) {\n                if (rawPos >= output.length) {\n                    return true;\n                }\n                if (_this.maskChars.hasOwnProperty(maskChar)) {\n                    formatted += output.charAt(rawPos++);\n                }\n                else {\n                    formatted += maskChar;\n                }\n            });\n            return formatted;\n        };\n        SimpleInputMask.prototype.parser = function (input) {\n            var _this = this;\n            if (input === void 0) { input = ''; }\n            if (!this.mask) {\n                // Without a mask we have nothing to do\n                return input;\n            }\n            var inputChars = (input || '').split('');\n            var newInputLength = input.length;\n            var parsedParts = [];\n            var elem = this.elem[0];\n            this.mask.every(function (maskChar) {\n                var nextInputChar = inputChars[0];\n                if (_this.maskChars.hasOwnProperty(maskChar)) {\n                    while (inputChars.length && !inputChars[0].match(_this.maskChars[maskChar])) {\n                        inputChars.shift();\n                    }\n                    if (inputChars.length) {\n                        parsedParts.push(inputChars.shift());\n                    }\n                }\n                else if (nextInputChar === maskChar) {\n                    inputChars.shift();\n                }\n                return inputChars.length > 0;\n            });\n            var parsed = parsedParts.join('');\n            var formatted = this.formatter(parsed);\n            var caretPosition = elem.selectionStart;\n            if (newInputLength > this.lastLen) {\n                var maskChar = this.mask[caretPosition - 1];\n                var currentPositionIsEditable = this.maskChars.hasOwnProperty(maskChar);\n                if (currentPositionIsEditable) {\n                    if (!input.charAt(caretPosition - 1).match(this.maskChars[maskChar])) {\n                        caretPosition--;\n                    }\n                }\n                else {\n                    while (caretPosition < formatted.length && !this.maskChars.hasOwnProperty(this.mask[caretPosition - 1])) {\n                        caretPosition++;\n                    }\n                }\n            }\n            this.lastLen = formatted.length;\n            this.elem.val(formatted);\n            this.ctrl.$viewValue = formatted;\n            this.ctrl.$render();\n            if (this.document.activeElement === elem) {\n                elem.selectionStart = elem.selectionEnd = caretPosition;\n            }\n            if (!angular.isArray(this.ctrl.$validators)) {\n                var valid = this.validator();\n                this.ctrl.$setValidity(this.directiveName, valid);\n                // Emulate Angular 1.3 model validation behaviour\n                if (!valid) {\n                    return '';\n                }\n            }\n            return parsed;\n        };\n        SimpleInputMask.prototype.validator = function () {\n            if (typeof this.ctrl.$viewValue === 'undefined' || this.ctrl.$viewValue === '') {\n                // No validation for an undefined model value\n                return true;\n            }\n            if (!this.mask) {\n                return true;\n            }\n            else {\n                return this.ctrl.$viewValue.length === this.mask.length;\n            }\n        };\n        SimpleInputMask.Document = null;\n        return SimpleInputMask;\n    })();\n    NZInputFormats.SimpleInputMask = SimpleInputMask;\n    NZInputFormats.module.directive('nzSimpleInputMask', ['$document', SimpleInputMask.Directive]);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"angular-nz-input-formats.ts\"/>\n///<reference path=\"simple-input-mask.directive.ts\"/>\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var NZBankNumber = (function (_super) {\n        __extends(NZBankNumber, _super);\n        function NZBankNumber() {\n            _super.call(this);\n            this.shortMask = '99-9999-9999999-99';\n            this.longMask = '99-9999-9999999-999';\n            this.directiveName = 'nzBankNumber';\n            this.options = {\n                mask: null,\n                strict: false\n            };\n            this.prefixes = {\n                '01': {\n                    // ANZ\n                    from: 1,\n                    to: 5699\n                },\n                '12': {\n                    // ASB\n                    from: 3000,\n                    to: 3499\n                },\n                '02': {\n                    // BNZ / The Cooperative Bank\n                    from: 1,\n                    to: 1299\n                },\n                '31': {\n                    // Citibank\n                    from: 2800,\n                    to: 2849\n                },\n                '25': {\n                    // ANZ, ex National Bank of New Zealand (ex Countrywide)\n                    from: 2500,\n                    to: 2599\n                },\n                '30': {\n                    // HSBC\n                    from: 2900,\n                    to: 2956\n                },\n                '38': {\n                    // Kiwibank\n                    from: 9000,\n                    to: 9499\n                },\n                '08': {\n                    // National Australia Bank\n                    from: 0,\n                    to: 9999\n                },\n                '06': {\n                    // ANZ, ex National Bank of New Zealand\n                    from: 1,\n                    to: 1499\n                },\n                '11': {\n                    // ANZ, ex PostBank\n                    from: 5000,\n                    to: 8999\n                },\n                '21': {\n                    // Trust Bank Auckland\n                    from: 4800,\n                    to: 4899\n                },\n                '15': {\n                    // TSB Bank\n                    from: 3900,\n                    to: 3999\n                },\n                '18': {\n                    // Trust Bank Bay of Plenty\n                    from: 3500,\n                    to: 3599\n                },\n                '16': {\n                    // Trust Bank Canterbury\n                    from: 4400,\n                    to: 4499\n                },\n                '20': {\n                    // Trust Bank Central\n                    from: 4100,\n                    to: 4199\n                },\n                '14': {\n                    // Trust Bank Otago\n                    from: 4700,\n                    to: 4799\n                },\n                '13': {\n                    // Trust Bank Southland\n                    from: 4900,\n                    to: 4799\n                },\n                '19': {\n                    // Trust Bank South Canterbury\n                    from: 4600,\n                    to: 4649\n                },\n                '17': {\n                    // Trust Bank Waikato\n                    from: 3300,\n                    to: 3399\n                },\n                '22': {\n                    // Trust Bank Wanganui\n                    from: 4000,\n                    to: 4049\n                },\n                '23': {\n                    // Trust Bank Wellington\n                    from: 3700,\n                    to: 3799\n                },\n                '29': {\n                    // United Bank\n                    from: 0,\n                    to: 9999\n                },\n                '24': {\n                    // Westland Bank\n                    from: 4300,\n                    to: 4349\n                },\n                '03': {\n                    // Westpac / RaboBank New Zealand / NZACU\n                    from: 1,\n                    to: 1999\n                }\n            };\n            this.setMask(this.shortMask);\n        }\n        NZBankNumber.Directive = function ($document) {\n            return NZInputFormats.SimpleInputMask.Directive($document, NZBankNumber);\n        };\n        NZBankNumber.prototype.parser = function (input) {\n            if (input.replace(/\\D/g, '').length <= 15) {\n                this.setMask(this.shortMask);\n            }\n            else {\n                this.setMask(this.longMask);\n            }\n            return _super.prototype.parser.call(this, input);\n        };\n        NZBankNumber.prototype.validator = function () {\n            var superVal = _super.prototype.validator.call(this);\n            if (!this.options['strict']) {\n                return superVal;\n            }\n            var value = this.ctrl.$viewValue;\n            if (value === 'undefined' || value === '') {\n                // No validation for an undefined model value\n                return true;\n            }\n            value = value.replace(/\\D/g, '');\n            if (value.length < 15 || value.length > 16) {\n                return false;\n            }\n            var bankCode = value.substr(0, 2);\n            if (this.prefixes.hasOwnProperty(bankCode)) {\n                var bank = this.prefixes[bankCode];\n                var branch = value.substr(2, 4);\n                if (branch.length === 4) {\n                    var branchNumber = Number(branch);\n                    return superVal && branchNumber >= bank.from && branchNumber <= bank.to;\n                }\n            }\n            return false;\n        };\n        return NZBankNumber;\n    })(NZInputFormats.SimpleInputMask);\n    NZInputFormats.NZBankNumber = NZBankNumber;\n    NZInputFormats.module.directive('nzBankNumber', ['$document', NZBankNumber.Directive]);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"angular-nz-input-formats.ts\"/>\n///<reference path=\"simple-input-mask.directive.ts\"/>\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var NZIrdNumber = (function (_super) {\n        __extends(NZIrdNumber, _super);\n        function NZIrdNumber() {\n            _super.call(this);\n            this.shortMask = '99-999-999';\n            this.longMask = '999-999-999';\n            this.directiveName = 'nzIrdNumber';\n            this.setMask(this.shortMask);\n        }\n        NZIrdNumber.Directive = function ($document) {\n            return NZInputFormats.SimpleInputMask.Directive($document, NZIrdNumber);\n        };\n        NZIrdNumber.prototype.parser = function (input) {\n            if (input.replace(/\\D/g, '').length <= 8) {\n                this.setMask(this.shortMask);\n            }\n            else {\n                this.setMask(this.longMask);\n            }\n            return _super.prototype.parser.call(this, input);\n        };\n        NZIrdNumber.prototype.validator = function () {\n            if (typeof this.ctrl.$viewValue === 'undefined' || this.ctrl.$viewValue === '') {\n                // No validation for an undefined model value\n                return true;\n            }\n            var input = NZIrdNumber.Extract(this.ctrl.$viewValue);\n            if (!input) {\n                return false;\n            }\n            if (!NZIrdNumber.CheckValidRange(input)) {\n                return false;\n            }\n            // Remove the check digit\n            var base = input.substr(0, 8);\n            return NZIrdNumber.CalculateCheckDigit(base, input.substr(-1));\n        };\n        NZIrdNumber.Extract = function (input) {\n            var matches = String(input).trim().match(/(?:\\d{8,9}|\\d{2,3}-\\d{3}-\\d{3})/);\n            if (matches && matches.length) {\n                // Pad to 9 digits with a leading 0, if required\n                return ('0' + matches[0].replace(/-/g, '')).substr(-9);\n            }\n            else {\n                return null;\n            }\n        };\n        NZIrdNumber.CheckValidRange = function (input) {\n            var asNumber = Number(input);\n            return asNumber >= 10000000 && asNumber <= 150000000;\n        };\n        NZIrdNumber.CalculateCheckDigit = function (input, expected) {\n            var weighting = [3, 2, 7, 6, 5, 4, 3, 2];\n            var checkDigit = NZIrdNumber.CalculateCheckDigitFor(weighting, input);\n            if (checkDigit === 10) {\n                return NZIrdNumber.ReCalculateCheckDigit(input, expected);\n            }\n            else {\n                return checkDigit === Number(expected);\n            }\n        };\n        NZIrdNumber.ReCalculateCheckDigit = function (input, expected) {\n            var weighting = [7, 4, 3, 2, 5, 2, 7, 6];\n            var checkDigit = NZIrdNumber.CalculateCheckDigitFor(weighting, input);\n            if (checkDigit === 10) {\n                return false;\n            }\n            else {\n                return checkDigit === Number(expected);\n            }\n        };\n        NZIrdNumber.CalculateCheckDigitFor = function (weighting, input) {\n            var sum = 0;\n            for (var i = 0; i < weighting.length; i++) {\n                sum += Number(input.charAt(i)) * weighting[i];\n            }\n            var remainder = sum % 11;\n            if (remainder === 0) {\n                return 0;\n            }\n            else {\n                return 11 - remainder;\n            }\n        };\n        return NZIrdNumber;\n    })(NZInputFormats.SimpleInputMask);\n    NZInputFormats.NZIrdNumber = NZIrdNumber;\n    NZInputFormats.module.directive('nzIrdNumber', ['$document', NZIrdNumber.Directive]);\n})(NZInputFormats || (NZInputFormats = {}));\n\n///<reference path=\"angular-nz-input-formats.ts\"/>\n///<reference path=\"simple-input-mask.directive.ts\"/>\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar NZInputFormats;\n(function (NZInputFormats) {\n    var NZPhoneNumber = (function (_super) {\n        __extends(NZPhoneNumber, _super);\n        function NZPhoneNumber() {\n            _super.call(this);\n            this.defaultMask = '9999999999999';\n            this.mobileMask = '999 999 999999';\n            this.intlMobileMask = '9999 999 999999';\n            this.landlineMask = '99 999 9999';\n            this.intlLandlineMask = '999 999 9999';\n            this.specialMask = '9999 999 999 9999';\n            this.intlSpecialMask = '99999 999 999 9999';\n            this.directiveName = 'nzPhoneNumber';\n            this.minLength = 0;\n            this.setMask(this.defaultMask);\n        }\n        NZPhoneNumber.Directive = function ($document) {\n            return NZInputFormats.SimpleInputMask.Directive($document, NZPhoneNumber);\n        };\n        NZPhoneNumber.prototype.formatter = function (output) {\n            if (typeof output === 'undefined' || output === null || output === '') {\n                return output;\n            }\n            var raw = NZPhoneNumber.sanitise(output);\n            if (angular.isDefined(this.options['intl'])) {\n                if (this.options['intl']) {\n                    raw = raw.match(/^(?:64.*|6)?/)[0];\n                }\n                else {\n                    raw = raw.match(/^(?:0.*)?/)[0];\n                }\n            }\n            var intl = raw.match(/^(64|6$)/);\n            if (intl) {\n                raw = '0' + raw.substr(2);\n            }\n            var type;\n            if (raw.match(/^0[89]0/)) {\n                type = 'special';\n                this.setMask(intl ? this.intlSpecialMask : this.specialMask);\n                this.minLength = intl ? 11 : 10;\n            }\n            else if (raw.substr(0, 2) === '02') {\n                type = 'mobile';\n                this.setMask(intl ? this.intlMobileMask : this.mobileMask);\n                this.minLength = intl ? 10 : 9;\n            }\n            else if (raw.match(/^0[345679]/)) {\n                type = 'landline';\n                this.setMask(intl ? this.intlLandlineMask : this.landlineMask);\n                this.minLength = intl ? 10 : 9;\n            }\n            else {\n                type = 'other';\n                this.setMask(this.defaultMask);\n                this.minLength = 9;\n            }\n            switch (this.options['type']) {\n                case 'special':\n                    raw = raw.match(/^(?:0[89]0.*|0[89]|0)?/)[0];\n                    break;\n                case 'mobile':\n                    raw = raw.match(/^(?:02[1257].*|02|0)?/)[0];\n                    break;\n                case 'landline':\n                    raw = raw.match(/^(?:0[345679].*|0)?/)[0];\n                    break;\n            }\n            output = intl ? raw.replace(/^0/, intl[0]) : raw;\n            return _super.prototype.formatter.call(this, output);\n        };\n        NZPhoneNumber.prototype.validator = function () {\n            var value = NZPhoneNumber.sanitise(this.ctrl.$viewValue);\n            return value.length === 0 || value.length >= this.minLength;\n        };\n        NZPhoneNumber.sanitise = function (input) {\n            return String(input).replace(/\\D/g, '');\n        };\n        return NZPhoneNumber;\n    })(NZInputFormats.SimpleInputMask);\n    NZInputFormats.NZPhoneNumber = NZPhoneNumber;\n    NZInputFormats.module.directive('nzPhoneNumber', ['$document', NZPhoneNumber.Directive]);\n})(NZInputFormats || (NZInputFormats = {}));\n})(window, window.angular);"],"sourceRoot":"/source/"}